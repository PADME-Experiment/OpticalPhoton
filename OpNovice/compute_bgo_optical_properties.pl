#!/usr/bin/perl

# Compute refractive index and scintillation probability density function for BGO.
# Refractive index is given for initial value of each bin
# Probability of each bin is given by the value of the probability density function
# for that bin multiplied by the bin width in eV.

# Define BGO scintillation spectrum as a function of wavelength
# These numbers were obtained with DataThief from published BGO scintillation spectrum
@wl = (
      374.4588, 376.0236, 376.8056, 377.5875, 379.1482, 379.9302, 380.7122, 381.4934,
      383.0573, 383.8393, 384.6205, 386.1844, 386.9656, 387.7476, 388.5295, 390.0927,
      390.8747, 391.6558, 393.2190, 394.0009, 394.7821, 395.5641, 397.1272, 397.9083,
      398.6896, 399.4715, 401.0339, 401.8151, 402.5962, 404.1586, 404.9397, 405.7208,
      406.5021, 408.0644, 408.8448, 409.6259, 411.1875, 411.9687, 412.7498, 413.5302,
      415.0917, 415.8729, 416.6533, 418.2147, 418.9968, 419.7779, 420.5575, 422.1190,
      422.8994, 423.6806, 424.4617, 426.0233, 426.8044, 427.5848, 429.1463, 429.9275,
      430.7086, 431.4899, 433.0514, 433.8326, 434.6137, 436.1761, 436.9572, 437.7376,
      438.5188, 440.0811, 440.8622, 441.6435, 443.2058, 443.9870, 444.7681, 445.5493,
      447.1116, 447.8928, 448.6747, 450.2371, 451.0183, 451.8003, 452.5814, 454.1446,
      454.9266, 455.7085, 456.4897, 458.0528, 458.8348, 459.6168, 461.1807, 461.9627,
      462.7447, 463.5274, 465.0914, 465.8742, 466.6570, 468.2217, 469.0037, 469.7865,
      470.5685, 472.1332, 472.9160, 473.6980, 474.4807, 476.0455, 476.8283, 477.6103,
      479.1758, 479.9586, 480.7414, 481.5241, 483.0897, 483.8725, 484.6553, 486.2216,
      487.0044, 487.7880, 488.5708, 490.1371, 490.9207, 491.7043, 492.4870, 494.0534,
      494.8370, 495.6206, 497.1878, 497.9714, 498.7541, 499.5377, 501.1049, 501.8885,
      502.6720, 504.2392, 505.0228, 505.8064, 506.5899, 508.1571, 508.9407, 509.7235,
      510.5095, 512.0767, 512.8601, 513.6430, 515.2102, 515.9938, 516.7774, 517.5609,
      519.1297, 519.9125, 520.6961, 521.4797, 523.0468, 523.8312, 524.6148, 526.1828,
      526.9663, 527.7507, 528.5343, 530.1031, 530.8875, 531.6719, 533.2398, 534.0234,
      534.8077, 535.5914, 537.1594, 537.9438, 538.7273, 539.5117, 541.0789, 541.8633,
      542.6469, 544.2147, 544.9984, 545.7820, 546.5655, 548.1336, 548.9171, 549.7015,
      550.4851, 552.0531, 552.8367, 553.6211, 555.1882, 555.9718, 556.7562, 557.5398,
      559.1069, 559.8904, 560.6749, 562.2421, 563.0257, 563.8092, 564.5928, 566.1608,
      566.9444, 567.7280, 568.5116, 570.0787, 570.8622, 571.6459, 573.2131, 573.9966,
      574.7802, 575.5638, 577.1310, 577.9146, 578.6981, 579.4817, 581.0489, 581.8325,
      582.6160, 584.1832, 584.9668, 585.7496, 586.5332, 588.1003, 588.8839, 589.6675,
      591.2347, 592.0183, 592.8018, 593.5846, 595.1518, 595.9354, 596.7189, 597.5025,
      599.0697, 599.8533, 600.6369, 602.2040, 602.9868, 603.7704, 604.5540, 606.1203,
      606.9039, 607.6875, 608.4711, 610.0383, 610.8218, 611.6046, 613.1718, 613.9554,
      614.7389, 615.5217, 617.0889, 617.8725, 618.6553, 620.2224, 621.0060, 621.7888,
      622.5724, 624.1387, 624.9223, 625.7059, 626.4895, 628.0558, 628.8394, 629.6221,
      631.1894, 631.9722, 632.7557, 633.5385, 635.1057, 635.8893, 635.8893 );
$nwl = @wl;

@vwl = (
      0.0170, 0.0215, 0.0260, 0.0305, 0.0577, 0.0622, 0.0667, 0.0757,
      0.0848, 0.0893, 0.0984, 0.1074, 0.1164, 0.1210, 0.1255, 0.1391,
      0.1436, 0.1526, 0.1662, 0.1707, 0.1798, 0.1843, 0.1978, 0.2069,
      0.2159, 0.2205, 0.2385, 0.2476, 0.2566, 0.2747, 0.2838, 0.2928,
      0.3018, 0.3199, 0.3335, 0.3425, 0.3652, 0.3742, 0.3832, 0.3968,
      0.4194, 0.4285, 0.4420, 0.4646, 0.4692, 0.4782, 0.4963, 0.5189,
      0.5325, 0.5415, 0.5506, 0.5732, 0.5822, 0.5958, 0.6183, 0.6274,
      0.6364, 0.6455, 0.6681, 0.6772, 0.6862, 0.7043, 0.7134, 0.7269,
      0.7360, 0.7541, 0.7631, 0.7721, 0.7902, 0.7993, 0.8083, 0.8174,
      0.8355, 0.8445, 0.8490, 0.8671, 0.8761, 0.8807, 0.8897, 0.9033,
      0.9078, 0.9123, 0.9214, 0.9348, 0.9395, 0.9440, 0.9529, 0.9576,
      0.9621, 0.9621, 0.9710, 0.9710, 0.9710, 0.9756, 0.9802, 0.9802,
      0.9847, 0.9891, 0.9891, 0.9937, 0.9937, 0.9983, 0.9983, 1.0028,
      1.0028, 1.0028, 1.0028, 1.0028, 1.0028, 1.0028, 1.0028, 0.9983,
      0.9983, 0.9937, 0.9937, 0.9891, 0.9847, 0.9802, 0.9802, 0.9756,
      0.9710, 0.9666, 0.9576, 0.9529, 0.9529, 0.9485, 0.9395, 0.9348,
      0.9304, 0.9214, 0.9169, 0.9123, 0.9078, 0.8988, 0.8942, 0.8942,
      0.8761, 0.8671, 0.8626, 0.8626, 0.8535, 0.8490, 0.8445, 0.8399,
      0.8218, 0.8218, 0.8174, 0.8128, 0.8037, 0.7948, 0.7902, 0.7767,
      0.7721, 0.7631, 0.7586, 0.7405, 0.7314, 0.7224, 0.7088, 0.7043,
      0.6953, 0.6907, 0.6772, 0.6681, 0.6636, 0.6545, 0.6455, 0.6364,
      0.6320, 0.6183, 0.6139, 0.6094, 0.6048, 0.5913, 0.5867, 0.5777,
      0.5732, 0.5596, 0.5551, 0.5460, 0.5370, 0.5325, 0.5234, 0.5189,
      0.5099, 0.5053, 0.4963, 0.4873, 0.4827, 0.4782, 0.4737, 0.4601,
      0.4556, 0.4511, 0.4466, 0.4375, 0.4330, 0.4285, 0.4194, 0.4149,
      0.4104, 0.4059, 0.3968, 0.3923, 0.3878, 0.3832, 0.3742, 0.3697,
      0.3652, 0.3561, 0.3516, 0.3516, 0.3471, 0.3380, 0.3335, 0.3290,
      0.3199, 0.3154, 0.3109, 0.3109, 0.3018, 0.2973, 0.2928, 0.2883,
      0.2792, 0.2747, 0.2702, 0.2612, 0.2612, 0.2566, 0.2521, 0.2476,
      0.2431, 0.2385, 0.2340, 0.2250, 0.2205, 0.2205, 0.2114, 0.2069,
      0.2024, 0.2024, 0.1933, 0.1888, 0.1888, 0.1798, 0.1752, 0.1752,
      0.1707, 0.1662, 0.1617, 0.1571, 0.1526, 0.1481, 0.1436, 0.1436,
      0.1345, 0.1345, 0.1300, 0.1300, 0.1210, 0.1164, 0.1164 );

# Normalize BGO scintillation spectrum to a probability density function
$ptot = 0.;
for($i=0;$i<$nwl-1;$i++) {
    $ptot += $vwl[$i]*($wl[$i+1]-$wl[$i]);
}

#printf("Ptot = %7.4f\n",$ptot);
#$pnorm = 0.;
for($i=0;$i<$nwl-1;$i++) {
    $pwl[$i] = $vwl[$i]/$ptot;
    #printf("%3d\t%8.4f\t%8.4f\t%8.4f\t%8.6f\n",$i,$wl[$i],$wl[$i+1]-$wl[$i],$vwl[$i],$pwl[$i]);
    #$pnorm += $pwl[$i]*($wl[$i+1]-$wl[$i]);
}
#printf("Pnorm = %8.6f\n",$pnorm);

# Define energy spectrum of interest
$emin = 1.; $emax = 4.;
$nbin = 100; $de = ($emax-$emin)/$nbin;
#print "$emin $emax $nbin $de\n";
@gammaE = ();
for ($i=0;$i<$nbin+1;$i++) {
    #printf "%d\t%f\n",$i,$emin+$i*$de;
    $gammaE[$i] = $emin+$i*$de;
    #printf "%f\n",$gammaE[$i];
}

# Alternatively gammaE can be defined explicitly and can contain
# bins of different sizes, e.g.
#@gammaE = ( 2.034, 2.068, 2.103, 2.139, 2.177, 2.216, 2.256, 2.298,
#	     2.341, 2.386, 2.433, 2.481, 2.532, 2.585, 2.640, 2.697,
#	     2.757, 2.820, 2.885, 2.954, 3.026, 3.102, 3.181, 3.265,
#	     3.353, 3.446, 3.545, 3.649, 3.760, 3.877, 4.002, 4.136 );
#$nbin = @gammaE-1;

# Compute refractive index
for ($i=0;$i<$nbin+1;$i++) {
    $e = $gammaE[$i];
    $l = 1.23986/$e;
    $ref_idx[$i] = sqrt(1+3.1218393*$l*$l/($l*$l-0.03265249));
    #printf "%5.3f   %7.3f   %6.4f\n",$e,$l,$ref_idx[$i];
    #printf "%6.4f, ",$n;
}

# Read wavelength-based scintillation spectrum and normalize it
#$n = 0;
#while(<>) {
#    chomp;
#    if ($_ =~ m/^([0-9\.]+), ([0-9\.]+)$/) {
#	$wl[$n] = $1;
#	$vwl[$n] = $2;
#	$n++;
#    }
#}

for($i=0;$i<$nbin;$i++){

    # Get wavelength interval corresponding to current energy bin
    $e_min = $gammaE[$i];   $l_max = 1239.84/$e_min;
    $e_max = $gammaE[$i+1]; $l_min = 1239.84/$e_max;

    # Find bins corresponding to wl interval 
    $j_min = -1; $j_max = -1;
    for($j=0;$j<$nwl-1;$j++){
	if ($wl[$j]<=$l_min && $l_min<$wl[$j+1]) { $j_min = $j; }
	if ($wl[$j]<=$l_max && $l_max<$wl[$j+1]) { $j_max = $j; last; }
    }
    #printf("%2d\t%5.3f\t%5.3f\t%8.4f\t%8.4f\t%3d\t%3d\n",$i,$e_min,$e_max,$l_min,$l_max,$j_min,$j_max);

    # Compute probability corresponding to current energy bin
    $pe[$i] = 0.;
    if ($j_min == -1 && $j_max == -1) {
	# Probability is 0
    } elsif ($j_min == -1) {
	for($j=0; $j<$j_max-1; $j++){
	    $pe[$i] += $pwl[$j]*($wl[$j+1]-$wl[$j]);
	}
	$pe[$i] += $pwl[$j_max]*($l_max-$wl[$j_max]);
	#print "$j_min $j_max $pe[$i]\n";
    } elsif ($j_max == -1) {
	$pe[$i] += $pwl[$j_min]*($wl[$j_min+1]-$l_min);
	for($j=$j_min+1; $j<@pwl-1; $j++){
	    #print "$j\n";
	    $pe[$i] += $pwl[$j]*($wl[$j+1]-$wl[$j]);
	}
	#print "$j_min $j_max $pe[$i]\n";
    } elsif ($j_min == $j_max) {
	$pe[$i] += $pwl[$j_min]*($l_max-$l_min);
	#print "$j_min $j_max $pe[$i]\n";
    } else {
	$pe[$i] += $pwl[$j_min]*($wl[$j_min+1]-$l_min);
	for($j=$j_min+1; $j<$j_max; $j++){
	    #print "$j\n";
	    $pe[$i] += $pwl[$j]*($wl[$j+1]-$wl[$j]);
	}
	$pe[$i] += $pwl[$j_max]*($l_max-$wl[$j_max]);
    }
    $pe[$i] /= ($e_max-$e_min);

    #printf("%3d\t%5.2f\t%5.2f\t%6.4f\t%8.6f\n",$i,$e_min,$e_max,$ref_idx[$i],$pe[$i]);

}

printf "\n  G4double bgoPhotonEnergy[] = {"; 
for($i=0;$i<=$nbin;$i++){
    if ($i%8 == 0) { printf "\n      "; }
    printf "%5.3f*eV",$gammaE[$i];
    if ($i != $nbin) { printf ", "; }
}
printf " };\n";

printf "\n  G4double bgoRefractiveIndex[] = {"; 
for($i=0;$i<=$nbin;$i++){
    if ($i%8 == 0) { printf "\n      "; }
    printf "%6.4f",$ref_idx[$i];
    if ($i != $nbin) { printf ", "; }
}
printf " };\n";

#$ptot = 0.;
printf "\n  G4double bgoScintFastComp[] = {"; 
for($i=0;$i<$nbin;$i++){
    if ($i%8 == 0) { printf "\n      "; }
    printf "%6.4f, ",$pe[$i];
    #$ptot += $pe[$i]*($gammaE[$i+1]-$gammaE[$i]);
}
printf "%6.4f };\n",0.;
#printf "Ptot = %7.4f\n",$ptot;
